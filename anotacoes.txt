==== VRAPTOR 3 =====
Framework MVC agil criado pela Caelum

Controller do Vreptor: precisam da anotação
@Resource

Dentro do controler, os metodos precisam ser marcados com seus URIs:
Ex: @Path("/ajuda")

Ao importar um projeto Eclipse, sempre marcar a opção de 'copiar para o workspace'
import -> existing project into workspace.

O VRaptor é um FrontController. Ele recebe todas as requisições
e delega-as para os controladores exatos (por exemplo ProdutoController, IndexController, etc)
/* - IndexController
/produto/* - ProdutoController

Ao criar um Controlodor e seus metodos, deve-se ter a mesma estrutura dentro de WEB-INF
Ex:
Classe ProdutoController
metodo lista()
No WEB-INF:
pasta produto
jsp lista.jsp

Customização de URI
Usando a anotação Path pode-se setar a URI que quiser para o metodo
EX: metodo exibir com  @Path("/produto/{id}") -> já passa o id por GET de uma forma customizada

Taglib pra resolver urls de forma inteligente, sem precisar passar o nome do projeto:
<c:url value="/produto/adiciona"/>
Tudo isso deve ser colocado dentro do action da tag form

Recursos que só aceitam POST devem ser anotados com: @Post

No caso abaixo, a variavel acessivel no JSP é "${produtoList}"
public List<Produto> lista() {
}

Para redirecionar o fluxo para outro metodo do Controller, precisamos setar o atributo Result,
passar no construtor e depois dar um forward, ex:
@Resource
public class ProdutoController {

    private final Result result;

    public ProdutoController(Result result) {
        this.result = result;
    }
No método usar:
result.forwardTo(NomeDaClasse.class).outrometodo();
->forwardTo: mesma requisicão, pode dar problemas na url (lado servidor)
->redirectTo: nova requisicão (lado cliente)

Incluir variaveis na sessao
result.include(): Inclui variaveis no Result que sao salvas na session.

-- Transformar em XML/JSON e jogar na sessão --
result.use(Results.xml()).from(nomeObjeto).serialize();
      ...         .json() ...
OBS: Esses metodos que transformam em XML/JSON nao precisam de JSPs correspondentes.

--- @Component ---
Classes com essa anotacao sao instanciadas pelo VRaptor quando forem chamadas

--- SESSION ou REQUEST scoped ----
Por padrao o VRaptor eh request scoped e trabalha com os objetos por requisicao.
Para que os objetos sejam gravados na sessao, precis-se da anotacao:
@SessionScoped

IMPORTANTE: Conexoes com BD devem ser curtas, ou seja, sempre por RequestScoped
Para economizar tempo ao abrir e fechar conexoes, um pool de conexoes deve ser utilizado

---- VALIDATOR ----
Classe de validacao do VRaptor. Deve ser passada no Construtor
validator.add(new ValidationMessage("Mensagem do erro","categoria_erro")); -> guarda erro
validator.onErrorUsePageOf(AlgumController.class).metodo() -> redireciona caso tenha erros
Para mostrar o erro na tela JSP:
<c:forEach items="${errors}" var="error">
    ${error.category} - ${error.message} <br />
</c:forEach>

Boa pratica, externalizar as mensagens colocando em um arquivo properties.
Depois, adicione a mensagem da forma abaixo
validator.add(new I18nMessage("preco", "produto.preco.invalido"));

Outra forma de add o erro, essa sem IFs, a seguir:
validator.checking(new Validations(){{
	        // o preço deve ser maior que 0.1
	        that(produto.getPreco() > 0.1,"erro", "produto.preco.invalido");
	       }});
As variaveis usadas precisam ser marcadas com final.

--- Retornar nada ---
Com result.nothing() o VRaptor vai retornar uma resposta HTTP com o status code 200 sem nenhum HTML 
